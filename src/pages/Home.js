import Navbar from '../Navbar';
import './Home.css'
import {useEffect, useState} from "react";
import { useUserData } from '../components/User';
import axios from 'axios';
import LikeButton from '../components/LikeButton';


// HomePage that displays all users in their area with similar tastes
// Users generated by the matchmaking algorithm
const Homepage = () => {

    const [matchedProfiles, setMatchedProfiles] = useState([]);
    const [name, setName] = useState("");
    const [bio, setBio] = useState("");
    const [songs, setSongs] = useState([]);
    const [artists, setArtists] = useState([]);
    const [pfp, setPfp] = useState(null);

    var storedJsonString = localStorage.getItem('user');
      
    // Parse the JSON string back into an object
    var storedUserObject = JSON.parse(storedJsonString);

    async function getAllUsers() {
        

        const storedEmail = storedUserObject.email;

        const encodedEmail = encodeURIComponent(storedEmail);
      
        try {
          const response = await axios({
            method: "GET",
            url: `http://dev-vibrations-api-final-env.eba-wpisspwu.us-east-2.elasticbeanstalk.com/api/users/match?email=${encodedEmail}`,
            headers: {
              "Authorization": "Bearer " + storedUserObject.token,
            },
          });
          const emailArray = response.data.body[storedEmail].filter(item => {
            // Use a regular expression to check if the item is an email address
            const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            return emailRegex.test(item);
          });
          setMatchedProfiles(emailArray);
        } catch (error) {
          console.error('Error fetching matches:', error);
        }
      }

    const [currentProfileIndex, setCurrentProfileIndex] = useState(0);

    async function getUserData() {
  
      const encodedCurrEmail = encodeURIComponent(matchedProfiles[currentProfileIndex]);
      try {
        const response = await axios({
          method: "GET",
          url: `http://dev-vibrations-api-final-env.eba-wpisspwu.us-east-2.elasticbeanstalk.com/api/users/getUser?email=${encodedCurrEmail}`,
          headers: {
            "Authorization": "Bearer " + storedUserObject.token,
          },
        });
          setName(response.data.firstName);
          setBio(response.data.bio);
          setSongs(response.data.topSongs);
          setArtists(response.data.topArtists);
          setPfp(response.data.pfp);
          console.log(response.data.pfp);
        } catch (error) {
          console.error('Error fetching user data:', error);
          window.alert("Please create your profile!");
        }
      }


    // Handle switching between profiles
    const handlePreviousProfile = () => {
        if (currentProfileIndex === 0) {
            setCurrentProfileIndex(matchedProfiles.length - 1);
        } else {
            setCurrentProfileIndex((prevIndex) => prevIndex - 1);
        }
    };

    const handleNextProfile = () => {
        if (currentProfileIndex === matchedProfiles.length - 1) {
            setCurrentProfileIndex(0);
        } else {
            setCurrentProfileIndex((prevIndex) => prevIndex + 1);
        }
    };

    useEffect(() => {
        const fetchData = async () => {
          await getAllUsers();
        };
    
        fetchData();
      }, []);
    
    useEffect(() => {
        // Wait for matchedProfiles to update, then call getUserData
        if (matchedProfiles.length > 0) {
          getUserData(matchedProfiles[currentProfileIndex]);
        }
      }, [matchedProfiles, currentProfileIndex]);

    return (
        <div>
            <Navbar />
            <div className='vertical-container'>
                <h1>Your Musical Matches </h1>
                    <div>
                    {matchedProfiles.length > 0 ? (
                        <div>
                        <div className='top-bar'>
                            <LikeButton name={name} pfp={pfp}/>
                        </div>
                        <div className="container">
                            <div className="profile">
                            <img src={`data:image/jpeg;base64,${pfp}`}></img>
                                <h2>{name}</h2>
                                <p>{bio}</p>
                            </div>
                         
                            <div className="favorite-music">
                            <strong>Favorite Songs:</strong>
                    <ul>
                        {songs && songs.length > 0 && (
                            // Render favSong only when the array is not null or empty
                            songs.map((song, index) => (
                                <li key={index}>{song}</li>
                            ))
                        )}
                    </ul>
                                <strong>Favorite Artists:</strong>
                    <ul>
                        {artists && artists.length > 0 && (
                            // Render favArtist only when the array is not null or empty
                            artists.map((artist, index) => (
                                <li key={index}>{artist}</li>
                            ))
                        )}
                    </ul>
                            </div>
                        </div>
                        <div className="arrows-button-container">
                            <div className="arrows-button" onClick={handlePreviousProfile}>
                                &lt;
                            </div>
                            <div className="arrows-button" onClick={handleNextProfile}>
                                &gt;
                            </div>
                        </div>
                        </div>
                        ) : (
                            // Render a loading state or message when matchedProfiles is empty
                            <p>Loading profiles...</p>
                        )}
                    </div>
            </div>
        </div>
    );
};

export default Homepage;
